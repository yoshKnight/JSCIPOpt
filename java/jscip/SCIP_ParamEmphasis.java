/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package jscip;

public final class SCIP_ParamEmphasis {
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_DEFAULT = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_DEFAULT", SCIPJNIJNI.SCIP_PARAMEMPHASIS_DEFAULT_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_CPSOLVER = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_CPSOLVER", SCIPJNIJNI.SCIP_PARAMEMPHASIS_CPSOLVER_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_EASYCIP = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_EASYCIP", SCIPJNIJNI.SCIP_PARAMEMPHASIS_EASYCIP_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_FEASIBILITY = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_FEASIBILITY", SCIPJNIJNI.SCIP_PARAMEMPHASIS_FEASIBILITY_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_HARDLP = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_HARDLP", SCIPJNIJNI.SCIP_PARAMEMPHASIS_HARDLP_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_OPTIMALITY = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_OPTIMALITY", SCIPJNIJNI.SCIP_PARAMEMPHASIS_OPTIMALITY_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_COUNTER = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_COUNTER", SCIPJNIJNI.SCIP_PARAMEMPHASIS_COUNTER_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_PHASEFEAS = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_PHASEFEAS", SCIPJNIJNI.SCIP_PARAMEMPHASIS_PHASEFEAS_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_PHASEIMPROVE = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_PHASEIMPROVE", SCIPJNIJNI.SCIP_PARAMEMPHASIS_PHASEIMPROVE_get());
  public final static SCIP_ParamEmphasis SCIP_PARAMEMPHASIS_PHASEPROOF = new SCIP_ParamEmphasis("SCIP_PARAMEMPHASIS_PHASEPROOF", SCIPJNIJNI.SCIP_PARAMEMPHASIS_PHASEPROOF_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static SCIP_ParamEmphasis swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + SCIP_ParamEmphasis.class + " with value " + swigValue);
  }

  private SCIP_ParamEmphasis(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private SCIP_ParamEmphasis(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private SCIP_ParamEmphasis(String swigName, SCIP_ParamEmphasis swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static SCIP_ParamEmphasis[] swigValues = { SCIP_PARAMEMPHASIS_DEFAULT, SCIP_PARAMEMPHASIS_CPSOLVER, SCIP_PARAMEMPHASIS_EASYCIP, SCIP_PARAMEMPHASIS_FEASIBILITY, SCIP_PARAMEMPHASIS_HARDLP, SCIP_PARAMEMPHASIS_OPTIMALITY, SCIP_PARAMEMPHASIS_COUNTER, SCIP_PARAMEMPHASIS_PHASEFEAS, SCIP_PARAMEMPHASIS_PHASEIMPROVE, SCIP_PARAMEMPHASIS_PHASEPROOF };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

